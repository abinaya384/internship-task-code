#include <stdio.h>
#include <stdlib.h>

// Define the structure for a singly linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node with given data
struct Node* createNode(int dataValue) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = dataValue;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a node at the end of the list
void insertAtEnd(struct Node** headReference, int dataValue) {
    struct Node* newNode = createNode(dataValue);

    if (*headReference == NULL) {
        *headReference = newNode;
        return;
    }

    struct Node* currentNode = *headReference;
    while (currentNode->next != NULL) {
        currentNode = currentNode->next;
    }

    currentNode->next = newNode;
}

// Function to find and print the middle node of the list
void printMiddleNode(struct Node* headNode) {
    struct Node* slowPointer = headNode;
    struct Node* fastPointer = headNode;

    while (fastPointer != NULL && fastPointer->next != NULL) {
        slowPointer = slowPointer->next;
        fastPointer = fastPointer->next->next;
    }

    if (slowPointer != NULL) {
        printf("The middle node value is: %d\n", slowPointer->data);
    }
}

// Function to print the linked list
void printLinkedList(struct Node* headNode) {
    struct Node* currentNode = headNode;
    printf("Linked list: ");
    while (currentNode != NULL) {
        printf("%d -> ", currentNode->data);
        currentNode = currentNode->next;
    }
    printf("NULL\n");
}

// Main function to test the code
int main() {
    struct Node* headNode = NULL;
    int totalNodes, dataValue;

    printf("Enter the number of nodes: ");
    scanf("%d", &totalNodes);

    for (int nodeIndex = 1; nodeIndex <= totalNodes; nodeIndex++) {
        printf("Enter value for node %d: ", nodeIndex);
        scanf("%d", &dataValue);
        insertAtEnd(&headNode, dataValue);
    }

    printLinkedList(headNode);
    printMiddleNode(headNode);

    return 0;
}
